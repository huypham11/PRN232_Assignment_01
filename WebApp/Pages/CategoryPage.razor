@page "/category_manage"
@using BusinessObjects
@using WebApp.Services
@using WebApp.Components
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<AuthorizeView RequiredPermission="categories">
    <h3>Category Management</h3>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success mb-2" @onclick="ShowAddModal">Add New Category</button>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryId</td>
                    <td>@category.CategoryName</td>
                    <td>@category.CategoryDesciption</td>
                    <td>@(category.IsActive.HasValue && category.IsActive.Value ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-primary me-1" @onclick="() => ShowEditModal(category)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Bootstrap Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input class="form-control" @bind="currentCategory.CategoryName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <input class="form-control" @bind="currentCategory.CategoryDesciption" />
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="currentCategory.IsActive" />
                    <label class="form-check-label">Active</label>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveCategory">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private List<Category>? categories;
    private Category currentCategory = new();
    private string modalTitle = "Add Category";
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task DeleteCategory(int id)
    {
        try
        {
            var success = await CategoryService.DeleteCategoryAsync(id);
            if (success)
            {
                var item = categories?.FirstOrDefault(c => c.CategoryId == id);
                if (item != null)
                {
                    categories?.Remove(item);
                    message = $"Category {id} deleted successfully.";
                }
            }
            else
            {
                message = $"Failed to delete category {id}.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        currentCategory = new Category { IsActive = true }; // mặc định active
        modalTitle = "Add Category";
        isEdit = false;
        ShowModal();
    }

    private void ShowEditModal(Category category)
    {
        currentCategory = new Category
            {
                CategoryId = category.CategoryId,
                CategoryName = category.CategoryName,
                CategoryDesciption = category.CategoryDesciption,
                IsActive = category.IsActive
            };
        modalTitle = "Edit Category";
        isEdit = true;
        ShowModal();
    }

    private async Task SaveCategory()
    {
        try
        {
            if (isEdit)
            {
                await CategoryService.UpdateCategoryAsync(currentCategory.CategoryId, currentCategory);
                var item = categories?.FirstOrDefault(c => c.CategoryId == currentCategory.CategoryId);
                if (item != null)
                {
                    item.CategoryName = currentCategory.CategoryName;
                    item.CategoryDesciption = currentCategory.CategoryDesciption;
                    item.IsActive = currentCategory.IsActive;
                }
                message = $"Category {currentCategory.CategoryId} updated successfully.";
            }
            else
            {
                await CategoryService.CreateCategoryAsync(currentCategory);
                await LoadCategories(); // reload để có ID tự tăng
                message = "New category added successfully.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }

        HideModal();
        StateHasChanged();
    }

    private async void ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#categoryModal");
    }

    private async void HideModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.hideModal", "#categoryModal");
    }
}
</AuthorizeView>
