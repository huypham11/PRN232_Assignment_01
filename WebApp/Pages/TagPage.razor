@page "/tag_manage"
@using BusinessObjects
@using WebApp.Services
@inject TagService TagService
@inject IJSRuntime JSRuntime

<h3>Tag Management</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info">@message</div>
}

@if (tags == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success mb-2" @onclick="ShowAddModal">Add New Tag</button>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Note</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in tags)
            {
                <tr>
                    <td>@tag.TagId</td>
                    <td>@tag.TagName</td>
                    <td>@tag.Note</td>
                    <td>
                        <button class="btn btn-primary me-1" @onclick="() => ShowEditModal(tag)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTag(tag.TagId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Bootstrap Modal -->
<div class="modal fade" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tagModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input class="form-control" @bind="currentTag.TagName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Note</label>
                    <input class="form-control" @bind="currentTag.Note" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTag">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string message;
    private List<Tag> tags;
    private Tag currentTag = new();
    private string modalTitle = "Add Tag";
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
    }

    private async Task LoadTags()
    {
        tags = await TagService.GetTagsAsync();
    }

    private async Task DeleteTag(int id)
    {
        try
        {
            var success = await TagService.DeleteTagAsync(id);
            if (success)
            {
                var item = tags.FirstOrDefault(t => t.TagId == id);
                if (item != null)
                {
                    tags.Remove(item);
                    message = $"Tag {id} deleted successfully.";
                }
            }
            else
            {
                message = $"Failed to delete tag {id}.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        currentTag = new Tag();
        modalTitle = "Add Tag";
        isEdit = false;
        ShowModal();
    }

    private void ShowEditModal(Tag tag)
    {
        currentTag = new Tag
            {
                TagId = tag.TagId,
                TagName = tag.TagName,
                Note = tag.Note
            };
        modalTitle = "Edit Tag";
        isEdit = true;
        ShowModal();
    }

    private async Task SaveTag()
    {
        try
        {
            if (isEdit)
            {
                await TagService.UpdateTagAsync(currentTag.TagId, currentTag);
                var item = tags.FirstOrDefault(t => t.TagId == currentTag.TagId);
                if (item != null)
                {
                    item.TagName = currentTag.TagName;
                    item.Note = currentTag.Note;
                }
                message = $"Tag {currentTag.TagId} updated successfully.";
            }
            else
            {
                await TagService.CreateTagAsync(currentTag);
                await LoadTags(); // reload để có ID tự tăng
                message = "New tag added successfully.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }

        HideModal();
        StateHasChanged();
    }

    private async void ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#tagModal");
    }

    private async void HideModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.hideModal", "#tagModal");
    }
}