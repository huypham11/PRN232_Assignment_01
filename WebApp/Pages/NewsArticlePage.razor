@page "/newsarticle_manage"
@using BusinessObjects
@using WebApp.Services
@inject NewsArticleService NewsArticleService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<h3>News Article Management</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info">@message</div>
}

@if (newsArticles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success mb-2" @onclick="ShowAddModal">Add New Article</button>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Headline</th>
                <th>Created Date</th>
                <th>Category</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in newsArticles)
            {
                <tr>
                    <td>@article.NewsArticleId</td>
                    <td>@article.NewsTitle</td>
                    <td>@article.Headline</td>
                    <td>@article.CreatedDate?.ToString("dd/MM/yyyy")</td>
                    <td>@GetCategoryName(article.CategoryId)</td>
                    <td>@(article.NewsStatus.HasValue && article.NewsStatus.Value ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-primary me-1" @onclick="() => ShowEditModal(article)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteNewsArticle(article.NewsArticleId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Bootstrap Modal -->
<div class="modal fade" id="newsArticleModal" tabindex="-1" aria-labelledby="newsArticleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newsArticleModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Article ID</label>
                            <input class="form-control" @bind="currentArticle.NewsArticleId" readonly="@isEdit" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <input class="form-control" @bind="currentArticle.NewsTitle" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Headline</label>
                            <input class="form-control" @bind="currentArticle.Headline" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">News Source</label>
                            <input class="form-control" @bind="currentArticle.NewsSource" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" @bind="currentArticle.CategoryId">
                                <option value="">Select Category</option>
                                @if (categories != null)
                                {
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Created Date</label>
                            <input class="form-control" type="datetime-local" @bind="currentArticle.CreatedDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Modified Date</label>
                            <input class="form-control" type="datetime-local" @bind="currentArticle.ModifiedDate" />
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="currentArticle.NewsStatus" />
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="mb-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control" rows="5" @bind="currentArticle.NewsContent"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveNewsArticle">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string message;
    private List<NewsArticle> newsArticles;
    private List<Category> categories;
    private NewsArticle currentArticle = new();
    private string modalTitle = "Add Article";
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadNewsArticles(), LoadCategories());
    }

    private async Task LoadNewsArticles()
    {
        newsArticles = await NewsArticleService.GetNewsArticlesAsync();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    private string GetCategoryName(short? categoryId)
    {
        if (categoryId == null || categories == null)
            return "Unknown";

        var category = categories.FirstOrDefault(c => c.CategoryId == categoryId.Value);
        return category?.CategoryName ?? "Unknown";
    }

    private async Task DeleteNewsArticle(string id)
    {
        try
        {
            var success = await NewsArticleService.DeleteNewsArticleAsync(id);
            if (success)
            {
                var item = newsArticles.FirstOrDefault(a => a.NewsArticleId == id);
                if (item != null)
                {
                    newsArticles.Remove(item);
                    message = $"Article {id} deleted successfully.";
                }
            }
            else
            {
                message = $"Failed to delete article {id}.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        currentArticle = new NewsArticle 
        { 
            NewsStatus = true,
            CreatedDate = DateTime.Now,
            ModifiedDate = DateTime.Now
        };
        modalTitle = "Add Article";
        isEdit = false;
        ShowModal();
    }

    private void ShowEditModal(NewsArticle article)
    {
        currentArticle = new NewsArticle
            {
                NewsArticleId = article.NewsArticleId,
                NewsTitle = article.NewsTitle,
                Headline = article.Headline,
                CreatedDate = article.CreatedDate,
                NewsContent = article.NewsContent,
                NewsSource = article.NewsSource,
                CategoryId = article.CategoryId,
                NewsStatus = article.NewsStatus,
                CreatedById = article.CreatedById,
                UpdatedById = article.UpdatedById,
                ModifiedDate = article.ModifiedDate
            };
        modalTitle = "Edit Article";
        isEdit = true;
        ShowModal();
    }

    private async Task SaveNewsArticle()
    {
        try
        {
            if (isEdit)
            {
                await NewsArticleService.UpdateNewsArticleAsync(currentArticle.NewsArticleId, currentArticle);
                var item = newsArticles.FirstOrDefault(a => a.NewsArticleId == currentArticle.NewsArticleId);
                if (item != null)
                {
                    item.NewsTitle = currentArticle.NewsTitle;
                    item.Headline = currentArticle.Headline;
                    item.NewsContent = currentArticle.NewsContent;
                    item.NewsSource = currentArticle.NewsSource;
                    item.CategoryId = currentArticle.CategoryId;
                    item.NewsStatus = currentArticle.NewsStatus;
                    item.ModifiedDate = DateTime.Now;
                }
                message = $"Article {currentArticle.NewsArticleId} updated successfully.";
            }
            else
            {
                await NewsArticleService.CreateNewsArticleAsync(currentArticle);
                await LoadNewsArticles(); // reload để có ID mới
                message = "New article added successfully.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }

        HideModal();
        StateHasChanged();
    }

    private async void ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#newsArticleModal");
    }

    private async void HideModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.hideModal", "#newsArticleModal");
    }
}